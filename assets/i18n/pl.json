{
    "Title": "Tłumaczenie demo",
    "WelcomeMessage": "czesc",

    "Contact": "Kontakt",
    "Contact_1": "",
    "Contact_2": "",
    "Contact_3": "",
    "Contact_4": "",
    "Contact_5": "",
    "Contact_6": "",
    "Contact_7": "",

    "HowLearnNET_1":"Jak się uczyć się .NET i C# (<i>CSharp</i>)",
    "HowLearnNET_2":"Jak zostać profesjonalnym programistą .NET",
    "HowLearnNET_3":"Jak się uczyć programowania?",
    "HowLearnNET_4":" Jeśli trafiłeś na tą stronę to zakładam, że jesteś osobą zainteresowaną nauką .NET i języka C#. Dlatego w tym materiale będę chciał opowiedzieć jak uczyć się w taki sposób aby relatywnie szybko zostać profesjonalnym programistą (<i>rozpocząć pracę jako programista</i>).",
    "HowLearnNET_5":"Najpierw spróbujmy określić co zdecyduje o tym, że będziesz programistą. To pozwoli tobie kłaść nacisk na sprawy istotne.",
    "HowLearnNET_6":"Do wyboru masz kilka możliwości lub miks tych możliwości:",
    "HowLearnNET_7":"[1] Studia informatyczne <br>[2] Stacjonarny kurs programowania <br>[3] Indywidualna nauka <br>[4] Praktyka w firmie<br>", 
    "HowLearnNET_8":"Hmmm... jest tego trochę. No i teraz co wybrać? Bo przecież każda decyzja to koszt finansowy i czasowy. Dlatego przedstawię tobie moje przemyślenia odnośnie tej sprawy, które są moją subiektywną opinnią ale mogą pomóc wejść w zawód programisty.",
    "HowLearnNET_9":"Na początku odrzucę punkt związany z studiami informatycznymi. W Polsce mamy taki pogląd, że posiadanie wykształcenia wyższego jest pewnym obowiązkiem, być może tak jest w pewnych zawodach. Jednak jeśli chodzi o programowanie to nie są wymagane. Bardzo rzadko firmy stawiają wymóg posiadania wykształcenia wyższego zatrudniając programistę. A o kwalifikacji kandydata do pracy decyduje poziom jego wiedzy technicznej na temat danej technologii. Dodatkowo studia trwają kilka dobrych lat na których uczone są rzeczy nie koniecznie przydatne do bycia programistą. Dlatego jeśli twoim celem jest dostać pracę młodszego programisty za około 1.5 roku od rozpoczęcia intensywnej nauki to studia będą ci nie po drodze.",
    "HowLearnNET_10":"Następnie spójrzmy na stacjonarne kursy programowania, które obiecują że zrobią z każdego programistę średnio w około 1 miesiąc. Koszt takiego kursu waha się w granicach od 3 000 zł do 10 000 zł. Taki kurs to dobra sprawa, gdyż daje możliwość poznania aspektów programowania w dość intensywnym trybie.<b> Ale uwaga!</b> grzechem tych firm jest to, że obiecują, zrobić z każdego programistę w 1 miesiąc. Przez to wypaczają pogląd i sposób podejścia kursantów do sprawy (<i>no ale takie są zasady każdej reklamy</i>). Taki kursant ma fałszywą obietnicę, że zapłacenie i odbycie kursu daje mu bilet do pracy profesjonalnego programisty - co jest oczywiście błędnym przekonaniem. Kurs poprostu o tym nie zdecyduje.",
    "HowLearnNET_11":"No dobrze to co w takim razie decyduje o tym czy uda mi się zostać programistą? Dobre pytanie, na które trzeba dobrze odpowiedzieć jeśli chcę dostać się do tego zawodu. Dlatego spróbujmy to naświetlić tak jak ta spraw wygląda.",
    "HowLearnNET_12":"Przedewszystkim nauka programowania jest procesem dość żmudnym zwłaszcza na początku. Dlatego nie obejdzie się bez samodzielnej nauki. <b> Należy postarać się aby jakość i intensywność tej nauki był wysoka, gdyż właśnie ten aspekt będzie najbardziej decydujący.</b> Materiały i narzędzia do nauki są dostępne w Internecie za darmo lub odpłatnie, jednak koszt ich jest stosunkowo niewielki porównując koszty z kursem stacjonarnym lub studiami. Cała nauka indywidualna może być w miejscu w którym się znajdujesz i dzięki temu odchodzą koszty czasowe i finansowe związane z dojazdami lub przebywaniem w innej miejscowości. Na chwilę obecną nie ma takiej technologii aby wiedzę wgrać bezpośrednio do głowy, dlatego wysiłek związany z indywidualną nauką cię nie ominie, jednak możesz sobie umilać naukę pijąc dobrą kawę :) lub wybierając się na jakiś kurs lub darmowy programistyczny event gdzie można posłuchać o sprawach technicznych i porozmawiać z ludźmi.",
    "HowLearnNET_13":"Indywidualna nauka to już jest dużo, jednak należy do tego dodać coś jeszcze (zrobić miks). To coś jeszcze to praca blisko kogoś kto jest doświadczonym programistą. I tutaj można to osiągnąć poprzez dostanie się na praktykę, gdzie będziemy mieli możliwość pracować blisko programistów. Taka praktyka daje zrozumienie pewnych praktycznych aspektów programowania, których nie da nam indywidualna nauka.",
    "HowLearnNET_14":"Podsumowując jeśli celujemy w to aby w niedługim czasie zostać profesjonalnym programistą to zdecyduje o tym <b>indywidualna nauka</b> plus <b>paromiesięczna praktyka</b> u boku doświadczonego programisty. Studia lub kursy są pomocne ale jako dodatek do wyżej opisanych aspektów.",
    "HowLearnNET_15":"Czego się uczyć i jak?",
    "HowLearnNET_16":"Jeśli już zdecydujemy się na samodzielną naukę to powinniśmy określić:",
    "HowLearnNET_17":"[1] czego się uczyć <br> [2] jak się uczyć <br> [3] jakie wybrać materiały",
    "HowLearnNET_18":"Czego się uczyć? Odpowiedź jest .NET i C# hmmm... ale to nie wystarczająca odpowiedź. Przecież gdy zaczniemy pracę to sama znajomość C# nie wystarczy, gdyż aplikacje korporacyjne są złożone z różnych komponentów, praca nad rozwojem aplikacji też nie odbywa się w próżni a w pewnym środowisku gdzie obowiązują pewne zasady i narzędzia.",
    "HowLearnNET_19":"Spróbujmy określić to czego należy nauczyć się jako podstawowe minimum aby poradzić na rozmowie kwalifikacyjnej i w pierwszych miesiącach pracy. Naukę powinno się zaplanować kilko torowo aby pokryć następujące obszary:",
    "HowLearnNET_20":"[1] składnia języka c# (<i>C-Sharp</i>) <br> [2] główne biblioteki .NET (<i>dot net</i>) <br> [3] podstawy pracy z bazami danych (<i> MS SQL Server lub Oracle</i>) <br> [4] narzędzie do pracy z kodem GIT lub SVN <br>",
    "HowLearnNET_21":"opanowanie ww. zagadnień są podstawą do rozpoczęcia pracy. Dodatkowo warto je rozszerzyć o zagadnienia frontendowe czyli JavaScript, jQuery lub AnguarJS gdyż coraz więcej aplikacji korporacyjnych tworzy się w technologii webowej.",
    "HowLearnNET_22":"Przejdźmy teraz do tego jak się uczyć wyżej wymienionych zagadnień i dobrać materiały. <b>Naszym celem powinno być poznanie aspektów programowania w sposób praktyczny.</b> Dobrze to brzmi ale co to dokładnie znaczy? Spróbujmy na to odpowiedzieć. Gdy rozpoczniesz pracę komercyjną będą przed tobą stawiane problemy opisywane przez analityków lub użytkowników w różny sposób a twoim zadaniem będzie zrozumienie to o co im chodzi i przełożenie na język zrozumiały dla maszyn. Innymi słowy będziesz musiał tłumaczyć opisy \"słowno-muzyczne\" na kod i rozwiązania. Dodatkowo będziesz osadzony w pewnym środowisku składającym się z narzędzi, aplikacji i rozwiązań które mają pomiędzy sobą wiele zależności.<b> Aby sobie z tym wszystkim poradzić twoja nauka powinna być ukierunkowana na zrozumienie poszczególnych aspektów programowania.</b> Innymi słowy powinieneś się uczyć w taki sposób aby rozumieć jak coś działa i do czego jest to potrzebne.",
    "HowLearnNET_23":"Dlatego materiały do nauki powinny być tak dobrane aby:",
    "HowLearnNET_24":"[1] wyjaśniały zagadnienia <br> [2] pokazywały przykłady <br> [3] opowiedziały do czego praktycznie to jest używane <br> [4] zawierały ćwiczenia w formie zadań praktycznych* <br> [5] oferowały możliwość weryfikacji czy zadanie zostało dobrze rozwiązane",
    "HowLearnNET_25":"<br><b>*</b>mówiąc o zadaniach praktyczne mam myśli zadania, w których są stawiane problemy a my musimy napisać kod lub zmodyfikować część kodu aplikacji, który rozwiązuje postawione problemy. Rozwiązywanie takich zadań świetnie pokazuje na ile rozumiemy pewne zagadnienia i może kwalifikować nas do tego czy już nadajemy się na rozpoczęcie pracy jako programista. <br><br> Nie powiedziałem jeszcze o testach typu \"ABCD\" - są dobre ale w kontekście powtórki materiału lub dla osób które chcą robić dodatkowe certyfikaty i czeka ich egzamin.<br> Dodatkowo fajnie gdy kursy czy materiały do nauki kończą się napisaniem większego projektu ćwiczeniowego, który obejmuje dość sporo zagadnień praktycznych. Taki projekt oprócz tego, że sprawdza nasze umiejętności w odnalezieniu się w roli programisty to dodatkowo można go wgrać na GitHub'a a link udostępnić w naszym CV. Co będzie ułatwiało przejście rozmów kwalifikacyjnych.",
    "HowLearnNET_26":"Podejście do praktyki i rekrutacji",
    "HowLearnNET_27":"Po roku intensywnej nauki należałoby postarać się o praktykę w firmie. Dobrze jest trafić do projektu gdzie będziemy mieli szansę pisać kod pod nadzorem doświadczonych programistów. Jednak z tym bywa różnie często zdarza się tak, że dostajemy zadanie nie związane z programowaniem np. testowanie. Dlatego warto pytać na spotkaniu kwalifikacyjnym o nasze przyszłe zadania i możliwości rozwoju. Pamiętajmy rozwój polega na zdobywaniu nowych doświadczeń, które w przyszłości powinny nam dać szanse na lepiej płatną pracę. Również praktyka nie oznacza, że przestajemy uczyć się indywidualnie po godzinach. Uczyć się trzeba cały czas, czy to mając praktykę czy pracując w zawodzie. Taki jest zawód programisty, rozwiązania i technologie zmieniają się i należy za tym nadążyć bo w przeciwnym razie z czasem będzie ciężko o dobrze płatną pracę.",

    "Order_1": "Co zawierają karty ćwiczeniowe?",
    "Order_2": "Karty ćwiczeniowe są w formacie PDF i zawierają:",
    "Order_3": "Część opisowa zagadnienia.",
    "Order_4": "Pytania i odpowiedzi na rozmowę kwalifikacyjną.",
    "Order_5": "Zadanie do napisania w formie projektu/kodu oraz rozwiązanie.",
    "Order_6": "Przykładowa karta ćwiczeń",
    "Order_7": "Jak zamówić karty ćwiczeniowe?",
    "Order_8": "Zakup nie wymagania ani rejestracji ani logowania.",
    "Order_9": "Wystarczy wysłać przelew za pośrednictwem PayPal. Na podany adres e-mail przy płatności będzie wysłana karta ćwiczeń.",
    "Order_10": "Przykładowy tytuł przelewu:",
    "Order_11": "m.kowalski888@gmail.com, C# poziom 1",
    "Order_12": "Realizacja do 24h",
    "Order_13": "Czas realziacji do 24h od momentu wpłaty.",
    "Order_14": "Rachunek bankowy dla wpłat:",
    "Order_15": "65 1140 2004 0000 3102 7737 3457",
    "Order_16": "Akceptacja regulaminu",
    "Order_17": "Wysłanie przelewu jest równoznaczne z zakupem i akceptcją",
    "Order_18": "regulaminu",
    "Order_19": "C# i .NET<br>poziom 1",
    "Order_20": "30",
    "Order_21": "PLN",
    "Order_22": "15 tematów",
    "Order_23": "45 stron materiałów",
    "Order_24": "45 pytań na rozmowie kwalifikacyjną",
    "Order_25": "15 zadań praktycznych",
    "Order_26": "tytuł płatności:",
    "Order_27": "twój@email, C# poziom 1",
    "Order_28": "C# i .NET<br>poziom 2",
    "Order_29": "30",
    "Order_30": "PLN",
    "Order_31": "13 tematów",
    "Order_32": "60 stron materiałów",
    "Order_33": "39 pytań na rozmowie kwalifikacyjną",
    "Order_34": "13 zadań praktycznych",
    "Order_35": "tytuł płatności:",
    "Order_36": "twój@email, C# poziom 2",
    "Order_37": "C# i .NET<br>poziom 3",
    "Order_38": "30",
    "Order_39": "PLN",
    "Order_40": "13 tematów",
    "Order_41": "50 stron materiałów",
    "Order_42": "39 pytań na rozmowie kwalifikacyjną",
    "Order_43": "13 zadań praktycznych",
    "Order_44": "tytuł płatności:",
    "Order_45": "twój@email, C# poziom 3",
    "Order_46": "assets/img/demo1.png",
    "Order_47": "assets/img/demo2.png",
    "Order_48": "assets/img/demo3.png",
    "Order_49": "assets/img/demo4.png",
    "Order_50": "assets/img/demo5.png",
    "Order_51": "assets/img/demo6.png",
    "Order_52": "assets/img/demo7.png",

    "Menu_1":  " | Jak się uczyć się .NET",
    "Menu_2":  " | Kursy",
    "Menu_2_1":  "C# pierwsze kroki",
    "Menu_2_2":  "C# składnia",
    "Menu_2_3":  ".NET high perform",
    "Menu_3":  " | Zamów ",
    "Menu_4":  " | Kontakt |",
    "Menu_5":  "",
    "Menu_6":  "",
    "Menu_7":  "",
    "Menu_8":  "",
    "Menu_9":  "",
    "Menu_10":  "",
    "Menu_11": "",

    "FirstSteps_OK": "dobrze",
    "FirstSteps_BAD" :  "źle",
    "FirstSteps_1":  "<b>Programowanie w C#</b> - pierwsze kroki",
    "FirstSteps_2":  "<i> materiał przeznaczony dla początkujących osób, chcących rozpocząć swoją naukę prograowania w C# (CSharp) <br> zawiera: <b>materiały video </b> +<b>testy ABC</b></i>",
    "FirstSteps_3":  "Rozpocznij",
    "FirstSteps_4":  "Programowanie C# - pierwszy krok",
    "FirstSteps_5":  "Programując w C#, jakie jest podstawowe narzędzie?",
    "FirstSteps_6":  "Google",
    "FirstSteps_7":  "Notatnik",
    "FirstSteps_8":  "Visual Studio",
    
    "FirstSteps_9": "Debug aplikacji i przydatne klawisze F5, F10, F11",
    "FirstSteps_10": "Co to jest debug aplikacji?",
    "FirstSteps_11": "Proces poszukiwania błędów",
    "FirstSteps_12": "To z angielskiego the bug [de-bug]",
    "FirstSteps_13": "Domena aplikacji rozproszonych",
    
    "FirstSteps_14": "Warunek \"if\"",
    "FirstSteps_15": "Do czego służą warunki?",
    "FirstSteps_16": "Do iteracji",
    "FirstSteps_17": "Do zmianny wartości w zmiennych",
    "FirstSteps_18": "Pozwala uzależnić zachowanie aplikacji od pewnych wartości",
    "FirstSteps_19": "Pętle \"for\" i \"foreach\"",
    "FirstSteps_20": "Co wyświetli się na ekranie? <br><br> <pre> for (int i = 0; i < 5; i++) <br> &nbsp;&nbsp;&nbsp; Console.Write(i); </pre>",
    "FirstSteps_21": "12345",
    "FirstSteps_22": "01234",
    "FirstSteps_23": "1234",
    "FirstSteps_24": "Kolekcje np. \"List\"",
    "FirstSteps_25": "Do czego są potrzebne kolekcje?",
    "FirstSteps_26": "Do przechowywania grupy obiektów/elementów",
    "FirstSteps_27": "Do wymiany danych z bazą danych",
    "FirstSteps_28": "Nazwa wzorca projektowego",    
    "FirstSteps_29": "Klasy i Obiekty - na przykładzie",
    "FirstSteps_30": "Dlaczego z klasy powstaje obiekt?",
    "FirstSteps_31": "Obiekt nie może powstać z klasy",
    "FirstSteps_32": "Gdyż klasa to to samo co obiekt",
    "FirstSteps_33": "Klasa to taka definicja, z której powstaje coś rzeczywistego",
    "FirstSteps_34": "Ćwiczenie - klasy i obiekty",
    "FirstSteps_35": "Z jednej klasy ile może powstać obiektów?",
    "FirstSteps_36": "Dowolna ilość",
    "FirstSteps_37": "Tylko 1",
    "FirstSteps_38": "Obiekt z klasy nie może powstać",
    "FirstSteps_39": "Metody i konstruktory",
    "FirstSteps_40": "Za co odpowiadają metody i konstruktory?",
    "FirstSteps_41": "Przechowanie danych obiektu",
    "FirstSteps_42": "Za zachowanie obiektów",
    "FirstSteps_43": "Przyśpieszają działanie kodu w klasie",
    "FirstSteps_44": "[Ćwicz C#] Metody  i  konstruktory",
    "FirstSteps_45": "Kiedy jest wywoływany kod konstruktora?",
    "FirstSteps_46": "Nie jest wywoływany",
    "FirstSteps_47": "W momencie zniszczenia obiektów pamięci",
    "FirstSteps_48": "W momencie tworzenia się obiektu",
    "FirstSteps_49": "Zmienne",
    "FirstSteps_50": "Jaki będzie prawidłowy zapis zmiennej typu tekstowego?",
    "FirstSteps_51": "string msg = \"jakiś tekst\";", 
    "FirstSteps_52": "int msg = \"ala ma kota\";", 
    "FirstSteps_53": "char msg = 'A';", 
    "FirstSteps_54": "Właściwości",
    "FirstSteps_55": "Za co oprócz przechowywania danych mogą odpowiadać właściwości?",
    "FirstSteps_56": "Jest to alternatywa dla konstruktora klasy",
    "FirstSteps_57": "Właściwości mogą służyć do ukraywania pól",
    "FirstSteps_58": "Za wykonanie pewnych akcji/czynności",
    "FirstSteps_59": "Ćwicz C#'a zmienne i właściwości",
    "FirstSteps_60": "Czy wartość zmiennej można przekazać do środka konstruktora?",
    "FirstSteps_61": "TAK",
    "FirstSteps_62": "NIE",
    "FirstSteps_63": "Chyba nie :)",
    "FirstSteps_64": "Modyfikatory dostępu",
    "FirstSteps_65": "Jaki modyfikator dostępu odpowiada za widoczność tylko w obrębie klasy?",
    "FirstSteps_66": "public",
    "FirstSteps_67": "private",
    "FirstSteps_68": "internal",
    "FirstSteps_69": "Ćwicz C#'a modyfikatory dostępu",
    "FirstSteps_70": "Za co odpowiadają modyfikatory dostępu?",
    "FirstSteps_71": "Przechowują dane w klasie",
    "FirstSteps_72": "Związane są z zapisem danych do pliku",
    "FirstSteps_73": "Za nadawanie poziomu dostępności do konkretnej składowej np. w klasie",
    "FirstSteps_74": "Rozwiązanie zadania z video Ćwicz C#'a modyfikatory dostępu",
    "FirstSteps_75": "Jaki modyfikator dostępu daje największy dostęp?",
    "FirstSteps_76": "public",
    "FirstSteps_77": "internal",
    "FirstSteps_78": "protected internal",
    "FirstSteps_79": "Zadanie końcowe",
    "FirstSteps_80": "Do losowania liczb służy:",
    "FirstSteps_81": "Console.GetNumber(10, 100);",
    "FirstSteps_82": "Next random = new Next(1, 100);",
    "FirstSteps_83": "Random random = new Random();",
    "FirstSteps_84": "Rozwiązanie zadania końcowego cz. 1",
    "FirstSteps_85": "Do czego jest mi potrzebny GitHub?",
    "FirstSteps_86": "Do przechowywania i kontroli wersji mojego kodu",
    "FirstSteps_87": "Do kompilacji i publikacji aplikacji",
    "FirstSteps_88": "Do dystrybucji gotowych aplikacji",
    "FirstSteps_89": "Rozwiązanie zadania końcowego cz. 2",
    "FirstSteps_90": "Jaką komendą wgrywamy zmiany do repozytorium kodu na GitHub?",
    "FirstSteps_91": "git pull <link do repo>",
    "FirstSteps_92": "git clone <link do repo>",
    "FirstSteps_93": "git push -u origin master",

    "Syntax_Order": "Zamów",
    "Syntax_1":  "<b>Składnia C#</b> - ćwiczenia",
    "Syntax_2":  " <i> materiał przeznaczony dla początkujących osób, chcących ćwiczyć swoje swoje umiejętności programowania w C# (CSharp)<br> zawiera:<b>materiały video </b> + <b>karty ćwiczeń</b></i>",
    "Syntax_3":  "Lekcje od 1 do 5",
    "Syntax_4":  "Lekcje od 6 do 10",
    "Syntax_5":  "Lekcje od 11 do 15",
    
    "Syntax_6":  "Kolekcje",
    "Syntax_7":  "Kolekcje to struktury, które są używane do przechowywania zbiorów (jakiejś ilości) obiektów. Takie kolekcje oferują szereg funkcjonalności umożliwiające wykonywanie operacji na elementach przechowywanych w kolekcji np. sortowanie, odwołanie się, filtrowanie, dodawanie, iterowanie lub ...",
    "Syntax_8":  "Konstruktor i destruktor",
    "Syntax_9": "Konstruktor to inaczej metoda, która wywołuje się w momencie powstania obiektu. Konstruktorów może być wiele w jednej klasie z różnymi parametrami wejściowymi i służy do wykonania pewnych operacji, które chcemy wykonać w trakcie tworzenia obiektu np. ustawić jakieś dane w właściwościach. Destruktor to metoda bezparametrowa, która jest wywoływana w momencie niszczenia obiektu i jest on tylko jeden, w której możemy zrobić dodatkowe rzeczy na chwilę przed zniszczeniem obiektu np. zamknąć połączenie na bazę danych. Poniżej przykłady zapisu konstruktora ...",
    "Syntax_10": "Przeciążania metod (ang. overload)",
    "Syntax_11": "Gdy mówimy o przeciążeniu to może ono dotyczyć metod lub konstruktorów. Najprościej mówiąc przeciążenie to dublowanie tych samych metod (lub konstruktorów) ale z innymi parametrami wejściowymi (wywołania) i z trochę innym zachowaniem. Poniżej przykład, który obrazuje przeciążenie metody “DisplayName”...",
    "Syntax_12": "Boxing i unboxing",
    "Syntax_13": "Pojęcie boxing i unboxing wiąże się z przechodzeniem pomiędzy typami referencyjnymi a wartościowymi. Boxing - jest to konwersja typu wartościowego na typ referencyjny. Unboxing - operacja odwrotna do operacji boxing. Poniżej kod obrazujący operacje pakowania i wypakowan...",
    "Syntax_14": "Enum",
    "Syntax_15": "Enum jest typem prostym/wartościowym (value type), który daje naszemu rozwiązaniu ścisłą kontrolę typów. Jeśli chciałbym od pewnych wartości uzależnić zachowanie aplikacji to mógłbym to zrobić opierając się na typie string lub int. Wszystko działałoby dobrze do czasu, gdy do mojego rozwiązania nie dostałaby się wartość której mój kod nie spodziewał się, dlatego że string i int mają dużo możliwości przekazania dowolnej wartości a tak dużej ilości nie jestem wstanie obsłużyć bo np. obsługuję tylko 3 wartości...",
    "Syntax_16": "Warunki \"if\" oraz \"switch\"",
    "Syntax_17": "Instrukcja “if” daje nam więcej możliwości w zapisywaniu ilości logicznych wyrażeń niż “switch”, który może przyjmować jedną wartość. Jednak, gdy mamy do napisania dużej ilości bloków warunkowych lepiej użyć “switch”, gdyż jest instrukcją bardziej wydajniejszą niż “if”. Poniższy przykład ma dość skomplikowaną logikę, której nie moglibyśmy zapisać przy użyciu instrukcji switch...",
    "Syntax_18": "Pętle",
    "Syntax_19": "Pętla to taki mechanizm, który potrafi wywołać jeden blok kodu wiele razy. Innymi słowy pozwala na kilkakrotne wywołanie tego samego bloku kodu. W C# mamy do dyspozycji następujące pętle...",
    "Syntax_20": "Typy",
    "Syntax_21": "Typy to takie definicje obiektów, które mówią o tym jak obiekt ma się zachowywać (metody) i jaki ma być (właściwości lub zmienne). W .NET mamy dwa rodzaje typów...",
    "Syntax_22": "Konwersja typów",
    "Syntax_23": "Język zorientowany obiektowo taki jak C# daje możliwość stworzenia definicji  obiektu. Taka definicja to typ, która dla różnych obiektów jest inna. Może zdarzyć się tak, że będziemy potrzebowali zamienić nasz obiekt np. z typu tekstowego (string) na typ liczbowy (int). Takim przykładem może zajść w sytuacji, gdy w konsoli czytamy wartości, które podał użytkownik w postaci tekstu a my potrzebujemy ten tekst zamienić na liczby po to aby wykonać jakąś operację matematyczną. Zobaczymy poniżej przyk...",
    "Syntax_24": "Tablice",
    "Syntax_25": "Tablice to struktury, które potrafią przechowywać wiele elementów o tym samym typie. Na przykład tablica typu bool będzie przechowywać wartości tylko true/false. A przykładowa deklaracja takiej tablicy może wyglądać tak...",
    "Syntax_26": "System.IO.File",
    "Syntax_27": "Aby pracować z plikami .NET udostępnia nam klasę “File”, która oferuje szereg metod do wykonywania operacji na plikach. Klasa ta jest zlokalizowana w przestrzeni nazw (namespace) “System.IO”. Dlatego aby używać klasy file najpierw musimy zadeklarować namespace na początku pliku *.cs. Przykładowo wygląda to tak...",
    "Syntax_28": "Namespace",
    "Syntax_29": "Przestrzenie nazw (namespace) są nieodłącznym elementem każdego projektu. Służą do organizacji naszego kodu (inaczej klas, struktur, interfejsów) w określonej lokalizacji logicznej. Tak jak pliki są umieszczone w różnych folderach, tak nasze klasy (lub struktury, interfejsy) są rozmieszczone w takich logicznych częściach aplikacji każda z tych logicznych części ma swoją nazwę do której można się odwoływać i to są właśnie przestrzenie nazw (namespace). Jak sama nazwa wskazuje przestrzeń nazw to wirtualne miejsce gdzie znajdują się klasy (lub struktury, interfejsy). Najprościej przestrzenie nazw można porównać do nazw ulic czy...",
    "Syntax_30": "Komentarze w kodzie",
    "Syntax_31": "Komentarze umieszczamy w kodzie naszej aplikacji. Ich celem jest dostarczenie dodatkowej informacji o tym co dany fragment kodu (np. metody) wykonuje lub za co jest odpowiedzialny. Jest to taki fragment tekstu, który jest dołączony do kodu aplikacji jednak kompilator go nie wykonuje. Komentowanie kodu jest dobrą praktyką programistyczną jednak należy pamiętać, że zbyt duża ilość komentarzy  może spowodować, że kod aplikacji będzie mało przejrzysty. W C# mamy trzy sposoby komentowania kodu - oto one...",
    "Syntax_32": "NULL",
    "Syntax_33": "Null mówi, że dana zmienna nie ma referencji (powiązania) do żadnego obiektu. Jeśli nie ma referencji to zadeklarowana zmienna jest pusta (tak jakby bez obiektu)...",
    "Syntax_34": "String",
    "Syntax_35": "<b>String</b> reprezentuje dane tekstowe. Zmienna o typie string jest typem referencyjnym i może zawierać dowolne dane tekstowe. W .NET za dane tekstowe odpowiada klasa <b>System.String</b>. Jednak w praktyce posługujemy się zapisem skróconym string. Praca z string’iem wiąże się z wykonywaniem wielu różnych operacji na tekście. Dodatkowo należy być zaznajomionym z często używaną klasą <b> StringBuilder </b>, która oferuję więcej możliwości niż podstawowa klasa string. Szczególnie przydaje się, gdy musimy pracować z tekstem w wielu iteracjach (<i>w pętli</i>).",
    
    "HP_1": ".NET High performance ",
    "HP_2": "Below tips for improving .NET (C#) code performance.",
    "HP_V_1": "Boxing and unboxing - avoid!",
    "HP_V_2": "Use Sealed Classes",
    "HP_V_3": "Collections vs Arrays",
    "HP_V_4": "Comparing non case sensitive string",
    "HP_V_5": "Use Strongly Typed Arrays",
    "HP_D_1": "soon ...",
    "HP_D_2": "soon ...",
    "HP_D_3": "soon ...",
    "HP_D_4": "soon ...",
    "HP_D_5": "soon ...",
    "HP_O_1": "What contain e-book?",
    "HP_O_2": "The e-book is in PDF format and contain:",

    "HP_OI_0": "assets/img/hp0.jpg",
    "HP_OI_1": "assets/img/hp1.jpg",
    "HP_OI_2": "assets/img/hp2.jpg",
    "HP_OI_3": "assets/img/hp3.jpg",
    "HP_OI_4": "assets/img/hp4.jpg",
    "HP_OI_5": "assets/img/hp5.jpg",
    "HP_OT_1": "The sample of e-book",
    "HP_C_1": "Tips for improving C# code performance",
    "HP_C_2": "Code examples (C#, .net)",
    "HP_C_3": "Explaining based performance aspects",

    "HP_C_4": "C# .NET performance",
    "HP_C_5": "5",
    "HP_C_6": "USD"
}