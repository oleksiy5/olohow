{
    "Title": "Translation demo",
    "WelcomeMessage": "Welcome to the international demo application",
    
    "Contact": "Contact",
    "Contact_1": "",
    "Contact_2": "",
    "Contact_3": "",
    "Contact_4": "",
    "Contact_5": "",
    "Contact_6": "",
    "Contact_7": "",

    "HowLearnNET_1":"How to learn .NET and C# (<i>CSharp</i>)",     
    "HowLearnNET_2":"How to become a professional .NET developer",
    "HowLearnNET_3":"How to learn programming?",
    "HowLearnNET_4":"If you visited to this site, I assume you are interested learning .NET and C#. Therefore, I will tell you how to learn on that way that to become a professional programmer relatively quickly (<i>start working as a programmer</ i>).",
    "HowLearnNET_5":"First, we try to recognize what decide that you will be a programmer. This allow you to learn in an effective way.",
    "HowLearnNET_6":"You have several options or a mix of this options:",
    "HowLearnNET_7":"[1] IT school <br>[2] Full-time programming course <br>[3] Learn by yourself <br>[4] Internship in company<br>", 
    "HowLearnNET_8":"And now what to choose? Because every decision is a financial and time cost. Therefore, I will present my experiences, which are my subjective opinion but can help you become a programmer.",
    "HowLearnNET_9":"At the beginning, I will reject the point of IT school. We often thinking that having a higher education is required, perhaps it is true in some professions. However, in the profession of the programmer, it does not require it. Very rarely, companies require education for a programmer. Getting a job is dependent on your technical skills. In addition, IT school takes few years and learn you things that are not useful for being a programmer. That why, if yours target is getting a job as a junior developer in about 1.5 years from the start of intensive learning, then the IT school can't help you.",
    "HowLearnNET_10":"Next, let's take a look at Full-time programming course. These courses promise to prepare all students for the programming job in one month. The cost is between from USD 1,000 to USD 3,000. Such course is good because it gives you the opportunity to learn to programme in an intense way. <b>But be careful!</b> These companies promise to teach all students programming in one month. In this way they distort the students' approach to learning programming (<i>but that's the rules of every advertisement</i>). Such student has a false promise that after the course he will become a programmer - course will not decide about it.",
    "HowLearnNET_11":"So, then what the determines I will become a programmer? A good question which needs to be answered correctly if you want to be a professional developer. Therefore, let's try to tell about how it looks.",    
    "HowLearnNET_12":"First of all, programming learning is quite a difficult process, especially at the beginning. That why you need to learn a lot on your own. You should ensure high quality and intensity of this learning <b>because this aspect will be the most critical</b>. Materials and tools for learning are available online for free or for a fee but their cost is relatively low compared to IT school costs. All online learning can be in the place where you are live, this give you saving time and money. Currently humanity dosn't have technology which allows uploud all programming knowlage to your brain, that's why effort will be necessery.",    
    "HowLearnNET_13":"Online learning is good way, but for this you should add something else (<i>make a mix</i>). It's \"something else\" that's work close someone who is an experienced programmer. For achieve this you can to get an internship in the company, where you will have the opportunity work close to senior developers. Internship in the company will give you an understanding of some practical aspects of programming, which learn yourself will not give you.",
    "HowLearnNET_14":"To conclude, if we want to become a professional programmer in a relatively short time, then you will need to spend many hours <b>to learn by yourself</b> plus <b>take a few months internship in a company</b>. IT school can help but as an addition to above aspects described.",
    "HowLearnNET_15":"What to learn and how?",
    "HowLearnNET_16": "If you decide to learn by yourself , you should specify:",
    "HowLearnNET_17":"[1] what to learn <br> [2] how to learn <br> [3] what educational materials to choose",   
    "HowLearnNET_18":"What to learn? The answer is .NET and C#, but that's not enough answer. Because, when you start working knowledge of C# is not enough, because corporate applications are composed of many components, development of the application is always in some environment where has many rules and tools.",   
    "HowLearnNET_19":"Now let's try to define what you should learn as the basic minimum to handle with on the job interview and the first job. You should plan to learn that way to cover the following areas:",
    "HowLearnNET_20":"[1] c# syntax (<i>C-Sharp</i>) <br> [2] .NET libraries (<i>dot net</i>) <br> [3] basics database knowledge (<i>MS SQL Server lub Oracle</i>) <br> [4] tools for working with code (<i>Visual Studio, GIT, SVN</i>) <br>",
    "HowLearnNET_21":"Learning the above issues will allow you to start work. In addition, it is good expanding them to frontend issues, i.e. JavaScript, jQuery or Anguar because as more and more corporate applications are created using web technology.",
    "HowLearnNET_22": "Let's see how to learn the above-mentioned issues and choose materials for learning. Our goal should be understanding each programming aspects in a practical way. It sounds good but what exactly does it mean? Let's try to answer it. It sounds good but what exactly does it mean? Let's try to answer to this. When you start commercial job, the problems described by analysts or users in many different ways and your task will be to understand what it means and translate into pragraming language or solution understandable for machines. In other words, you will have to translate the users needed into code and solutions. Additionally you will be embedded in a some environment consisting of tools, applications and solutions witch have many dependencies. <b>To handle with all this, you need focused on understanding aspects of programming.</b> In other words, you should learn to understand how something works and what it is for.",
    "HowLearnNET_23":"That's why educational materials should be chosen so that:",
    "HowLearnNET_24":"[1] explained the issues <br> [2] showed examples <br> [3] explained practical aspects <br> [4] included practical tasks* <br> [5] included solution for practical task",
    "HowLearnNET_25":"<br><b>*</b>saying about practical tasks I meant the task where you need write or modify some code to solve problems. Solving such tasks shows how well you understand programming issues and qualify you to work. <br><br>I haven't told anything about \"ABCD\" tests - they are good but as revision your knowlage or for people who want to applaying additional exams for certificates. Additionally, it's good when your learning ends with writing a larger exercise project. Such project you can upload into GitHub and share the link in your CV. This helps you on a job interview.",    
    "HowLearnNET_26":"Approach to internship and recruitment",    
    "HowLearnNET_27":"After one year of intensive learning, you should be looking for an internship in the company. It is good to start in the project where you will have the chance to write the code under the supervision of senior developer. Very often it can be that you get non-programming task, e.g. testing. That is why it's worth asking about our future tasks and opportunities for development at the job interview. We need to remember about development our knowledge and experiences that will give us a chance for a better-paid job. The internship also doesn't mean that you can stop learn by your self after job hours. You have to learn all the time, no matter what you have the internship or job. That is the profession of programmer, solution and technologies are very quickly changing and you should be learning them otherwise it will be hard to take a well-paid job.",

    "Order_1": "What they contain exercise cards?",
    "Order_2": "The exercise cards are in PDF format and contain:",
    "Order_3": "Explanation of an issue.",
    "Order_4": "Questions and answers for the interview.",
    "Order_5": "Tasks for solved.",
    "Order_6": "The sample of exercise card",
    "Order_7": "How buy exercise cards?",
    "Order_8": "Zamówienie nie wymagania ani rejestracji ani logowania.",

    "Order_9": "Wystarczy wysłać przelew w tytule wpisując adres email, na który będą wysłane karty ćwiczeń oraz nazwę kart ćwiczeń, które chce się zamówić.",

    "Order_10": "Przykładowy tytuł przelewu:",

    "Order_11": "m.kowalski888@gmail.com, C# poziom 1",


    "Order_12": "Realizacja 24h",

    "Order_13": "Czas realziacji 24h od momentu zaksięgowania wpłaty.",

    "Order_14": "Rachunek bankowy dla wpłat:",

    "Order_15": "65 1140 2004 0000 3102 7737 3457",
    "Order_16": "Akceptacja regulaminu",
    "Order_17": "Wysłanie przelewu jest równoznaczne z zakupem i akceptcją",
    "Order_18": "regulaminu",
    "Order_19": "C# i .NET<br>level 1",
    "Order_20": "5",
    "Order_21": "USD",
    "Order_22": "15 topics",
    "Order_23": "45 pages",
    "Order_24": "45 questions and answers",
    "Order_25": "15 exercises and solutions",
    "Order_26": "tytuł płatności:",
    "Order_27": "twój@email, C# level 1",
    "Order_28": "C# i .NET<br>level 2",
    "Order_29": "5",
    "Order_30": "USD",
    "Order_31": "13 topics",
    "Order_32": "60 pages",
    "Order_33": "39 questions and answers",
    "Order_34": "13 exercises and solutions",
    "Order_35": "tytuł płatności:",
    "Order_36": "twój@email, C# level 2",
    "Order_37": "C# i .NET<br>level 3",
    "Order_38": "5",
    "Order_39": "USD",
    "Order_40": "13 topics",
    "Order_41": "50 pages",
    "Order_42": "39 questions and answers",
    "Order_43": "13 exercises and solutions",
    "Order_44": "tytuł płatności:",
    "Order_45": "twój@email, C# level 3",

    "Menu_1":  " | How to learn .NET",
    "Menu_2":  " | Courses",
    "Menu_2_1":  "C# first steps",
    "Menu_2_2":  "C# syntax",
    "Menu_3":  " | Buy ",
    "Menu_4":  " | Contact |",
    "Menu_5":  "",
    "Menu_6":  "",
    "Menu_7":  "",
    "Menu_8":  "",
    "Menu_9":  "",
    "Menu_10":  "",
    "Menu_11": "",

    "FirstSteps_OK": "correct",
    "FirstSteps_BAD": "wrong",
    "FirstSteps_1":  "<b>Programming in C#</b> - first steps",
    "FirstSteps_2":  "<i> material for beginners who want to start write code in C# (CSharp) <br> it contains: <b> videos </b> + <b>tests ABC</b></i>",
    "FirstSteps_3":  "Start",
    "FirstSteps_4":  "Programming in C# - first step",
    "FirstSteps_5":  "What is the basic tool for programming in C#?",
    "FirstSteps_6":  "Google",
    "FirstSteps_7":  "Notepad",
    "FirstSteps_8":  "Visual Studio",

    "FirstSteps_9": "Debug application and useful keys F5, F10, F11",
    "FirstSteps_10": "What is the debug?",
    "FirstSteps_11": "The process of searching errors",
    "FirstSteps_12": "It's from English the bug [de-bug]",
    "FirstSteps_13": "Distributed application domain (DAD)",
    
    "FirstSteps_14": "Condition \"if\"",
    "FirstSteps_15": "What are the conditions for?",
    "FirstSteps_16": "To iterate",
    "FirstSteps_17": "To change values ​​in variables",
    "FirstSteps_18": "Allows you to make application behavior dependent on certain values",
    "FirstSteps_19": "Loops \" for\" and \"foreach \"",
    "FirstSteps_20": "What will appear on the screen? <br> <br> <pre> for (int i = 0; i <5; i ++) <br> & nbsp; & nbsp; & nbsp; Console.Write (i); < / pre> ",
    "FirstSteps_21": "12345",
    "FirstSteps_22": "01234",
    "FirstSteps_23": "1234",
    "FirstSteps_24": "Collections e.g. \" List\"",
    "FirstSteps_25": "What do collections need for?",
    "FirstSteps_26": "To store a group of objects / elements",
    "FirstSteps_27": "To exchange data with the database",
    "FirstSteps_28": "Name of the design pattern",
    "FirstSteps_29": "Classes and Objects - example",
    "FirstSteps_30": "Why is the object formed from the class?",
    "FirstSteps_31": "The object can not arise from the class",
    "FirstSteps_32": "Because the class is the same as the object",
    "FirstSteps_33": "Class is a definition from which something real is made",
    "FirstSteps_34": "Exercise - classes and objects",
    "FirstSteps_35": "From one class how many objects can be created?",
    "FirstSteps_36": "Any amount",
    "FirstSteps_37": "Only 1",
    "FirstSteps_38": "Object from class can not be created",
    "FirstSteps_39": "Methods and constructors",
    "FirstSteps_40": "What are the methods and constructors for?",
    "FirstSteps_41": "Storing object data",
    "FirstSteps_42": "For preserving objects",
    "FirstSteps_43": "Speed ​​up the code in the classroom",
    "FirstSteps_44": "[Exercise C #] Methods and constructors",
    "FirstSteps_45": "When is the constructor code called?",
    "FirstSteps_46": "It is not called",
    "FirstSteps_47": "When the memory objects are destroyed",
    "FirstSteps_48": "When the object was created",
    "FirstSteps_49": "Variables",
    "FirstSteps_50": "What will be the correct record of a text type variable?",
    "FirstSteps_51": "string msg = \" some text\";",
    "FirstSteps_52": "int msg = \"ala has a cat\";",
    "FirstSteps_53": "char msg = 'A';",
    "FirstSteps_54": "Properties",
    "FirstSteps_55": "What can the properties match for in addition to data storage?",
    "FirstSteps_56": "This is an alternative to the class constructor",
    "FirstSteps_57": "Properties can be used to crop fields",
    "FirstSteps_58": "For performing certain actions / actions",
    "FirstSteps_59": "Exercise C # 'and variables and properties",
    "FirstSteps_60": "Can the variable value be passed inside the constructor?",
    "FirstSteps_61": "YES",
    "FirstSteps_62": "NO",
    "FirstSteps_63": "Probably not :)",
    "FirstSteps_64": "Access modifiers",
    "FirstSteps_65": "What access modifier is responsible for visibility only within the class?",
    "FirstSteps_66": "public",
    "FirstSteps_67": "private",
    "FirstSteps_68": "internal",
    "FirstSteps_69": "Exercise C # 'and access modifiers",
    "FirstSteps_70": "What are the access modifiers for?",
    "FirstSteps_71": "Store data in the classroom",
    "FirstSteps_72": "They are related to writing data to a file",
    "FirstSteps_73": "For granting the level of accessibility to a specific component, e.g. in a class",
    "FirstSteps_74": "Solution of a video task. Exercise C # 'and access modifiers",
    "FirstSteps_75": "What access modifier gives you the most access?",
    "FirstSteps_76": "public",
    "FirstSteps_77": "internal",
    "FirstSteps_78": "protected internal",
    "FirstSteps_79": "Final task",
    "FirstSteps_80": "Numbers are used for drawing numbers",
    "FirstSteps_81": "Console.GetNumber (10, 100);",
    "FirstSteps_82": "Next random = new Next (1, 100);",
    "FirstSteps_83": "Random random = new Random ();",
    "FirstSteps_84": "Solution to the final task part 1",
    "FirstSteps_85": "Why do I need GitHub?",
    "FirstSteps_86": "For storing and controlling the version of my code",
    "FirstSteps_87": "To compile and publish the application",
    "FirstSteps_88": "For distribution of ready applications",
    "FirstSteps_89": "Solution to the final task part 2",
    "FirstSteps_90": "What command do we upload the changes to the GitHub code repository?",
    "FirstSteps_91": "git pull <link to repo>",
    "FirstSteps_92": "git clone <link to repo>",
    "FirstSteps_93": "git push -u origin master",
    
    "Syntax_1":  "",
    "Syntax_2":  "",
    "Syntax_3":  "",
    "Syntax_4":  "",
    "Syntax_5":  "",
    "Syntax_6":  "",
    "Syntax_7":  "",
    "Syntax_8":  "",
    "Syntax_9": ""

    

}